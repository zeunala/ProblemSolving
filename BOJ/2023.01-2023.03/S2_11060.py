'''
점프 점프

입력
첫째 줄에 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 Ai (0 ≤ Ai ≤ 100)가 주어진다.

출력
재환이가 최소 몇 번 점프를 해야 가장 오른쪽 끝 칸으로 갈 수 있는지 출력한다.
만약, 가장 오른쪽 끝으로 갈 수 없는 경우에는 -1을 출력한다.
'''

'''
- 동적 계획법 문제로 보인다. 맨 오른쪽 칸부터 최소 점프 횟수를 구해나간다.
* Pass/1st/00:07:36
'''
N = int(input())
arr = list(map(int, input().split()))

INF = 10 ** 10
dp = [INF] * N # dp[i]는 i번째(i>=0)에서 끝 점까지의 최소 점프 횟수
dp[-1] = 0 # 끝 점은 점프를 하지 않고 바로 갈 수 있다.

for i in range(N - 2, -1 , -1):
    if arr[i] > 0:
        dp[i] = min(INF, min(dp[i+1:i+1+arr[i]]) + 1) # 다음 N칸 중 최소 점프 횟수 + 1칸 이동하면 끝 점으로 갈 수 있다.
        
if dp[0] == INF:
    print(-1)
else:
    print(dp[0])