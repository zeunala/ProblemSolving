'''
떡 먹는 호랑이

입력
첫째 줄에는 할머니가 넘어온 날 D (3 ≤ D ≤ 30)와 그 날 호랑이에게 준 떡의 개수 K (10 ≤ K ≤ 100,000)가 하나의 빈칸을 사이에 두고 주어진다. 

출력
첫줄에 첫 날에 준 떡의 개수 A를 출력하고 그 다음 둘째 줄에는 둘째 날에 준 떡의 개수 B를 출력한다.
이 문제에서 주어진 D, K에 대해서는 항상 정수 A, B (1≤ A ≤ B)가 존재한다. 
'''

'''
- A, B, A + B, A + 2B, 2A + 3B, 3A + 5B, 5A + 8B, ... 의 개수로 떡을 주어야 한다.
우선 D일의 떡의 개수를 A, B로 나타낸 식을 구하고, 일차 방정식의 해를 구하는 식으로 문제를 해결하도록 한다.
* Pass/1st/00:19:53
'''
def getTermsAB(D): # D일의 떡의 개수가 aA + bB일 때 (a, b)값을 리턴한다.
    fibo = [1, 1] # fibo[i]는 i번째 피보나치 수 (1, 1, 2, 3, 5, ...)
    for i in range(30):
        fibo.append(fibo[-1] + fibo[-2])
        
    return (fibo[D - 3], fibo[D - 2])

D, K = map(int, input().split())
(a, b) = getTermsAB(D) # aA + bB = K 방정식에서 a, b, K값이 주어졌을 때 A, B의 값을 구해야한다.

for i in range(1, 50001): # 각 A의 범위에 대하여 매칭되는 B값이 있는지 확인한다. 문제의 조건에서 A, B값이 반드시 존재하고 A가 5만이 넘을 수 없다.
    if (K - a * i) % b == 0: # bB = k - aA에서 k - aA가 b로 나누어떨어지면 B값이 존재한다.
        print(i)
        print((K - a * i) // b)
        break